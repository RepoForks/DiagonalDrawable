/*
 * DiagonalDrawable - A set of Android libraries to help speed up Android development.
 *
 * Copyright (c) 2018 DiagonalDrawable
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

import java.nio.charset.Charset
import java.nio.file.Files
import java.nio.file.Paths

/**
 * Reads a file as string.
 *
 * @param path path to the file.
 * @return the string with the file contents.
 * @throws IOException if file don’t exist.
 */
private static String readFileAsString(String path) throws IOException {
    byte[] encoded = Files.readAllBytes(Paths.get(path))
    return new String(encoded, Charset.defaultCharset())
}

/**
 * Replace every semantic version occurrence in  specified file.
 *
 * @param newVersion version to replace.
 * @param fileName the file to search.
 * @throws IOException if file don’t exist.
 */
private static void replaceAllSemVerInFile(String newVersion, String fileName) throws IOException {
    String readme = readFileAsString(fileName)
    String readmeVersionReplaced = readme.replaceAll("(\\d+(\\.\\d+){2})(\\-[\\w\\d\\.\\-]*)?(\\+[\\w\\d\\.\\-]*)?", newVersion)

    PrintWriter output = new PrintWriter(fileName)
    output.print(readmeVersionReplaced)
    output.close()
}

ext {
    processUpdateReadme = { File resDir, String extension, String libraryVersionName ->
        resDir.eachFileRecurse { file ->
            if (file.name.endsWith(extension)) {
                replaceAllSemVerInFile(libraryVersionName, file.absolutePath)
            }
        }
    }
}